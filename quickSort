# Quick Sort
	1. Like merge sort, exploits the fact that arrays of 0 or 1 element are always sorted
	2. Works by selecting one element (called the "pivot") and finding the index where the
		pivot should end up in the  sorted array.

	3. Once the pivot is positioned appropriately, quick sort can be applied on either side 	of the pivot.

# How does it works
	[5,2,1,8,4,7,6,3]
   [3,2,1,4,^5^ ,7,6,8] // take  first elem and place in right place
   [2,1,^3^,4,^5^, 7,6,8]	// repeat recursivly
  [1,^2^,^3^,4,^5^,7,6,8]
 [1,^2^,^3^,4,^5^,6,^7^,8]
[1,2,3,4,5,6,7,8]

Try the above code using visualgo.com

# Pivot Helper
	1. In order to implement merge sort, it's usefull to first implement a function 	responsible arranging elements in an array on either side of a pivot
	2. Given an array, this helper function should designate an element as the pivot
	3. It should then rearrage elements in the array so that all values less then the pivot 	are moved to the left of the  pivot, and all values greater then the pivot are moved to 	the right of the pivot.
	4. The order of elements on either side of the pivot doesn't matter!
	5. The helper should do this in place, that is, It should not create a new array
	6. When complete, the helper should return the index of the pivot.

# Picking a pivot
	1. The runtime of quick sort depends in part on how one selects the pivot
	2. Idelly, the pivot should be chosen so that it's roughly the median value in the 	data set you're sorting
	3. For simplicity, We'll always choose the pivot to be the first element (We'll talk 	about consequences of this later)

Pivot Pseudocode
	1. It will help to accepts three arguments: an array, a start index, and an end 	index(these can default to 0 and the array length minus 1, respectively)

	2. Grab the pivot from from the start of the array;
	3. store the current pivot index in a veriable (this will keep track of where the 	pivot should end up)
	4. Loop through the array from the start untill the end
		# If the pivot is greater then current element, increment the pivot index 			variable and then swap the current element with the element at the pivot index.

	5. swap the starting element(i.e the pivot) with the pivot index
	6. Return the pivot index. 


function pivot(arr,start=0,end = arr.length+1){
    function swap(array,i,j){
      var temp = array[i];
      array[i] = array[j];
      array[j] = temp;
    }

   var pivot = arr[start];
   var swapIdx = start;	

   for(var i = start + 1; i < arr.length; i++){
     if(pivot > arr[i]){
      swapIdx++;
      swap (arr,swapIdx, i);
     
     }
   }
   swap(arr,start,swapIdx);
   return swapIdx;
}

//console.log(pivot([4,8,2,1,5,7,6,3]))

function quickSort(arr,left=0,right = arr.length-1){

  if(left < right){
    let pivotIndex = pivot(arr,left,right)
    // left
    quickSort(arr,left,pivotIndex-1)

    // right
    quickSort(arr,pivotIndex+1,right)
 }
  return arr;
}

console.log(quickSort([4,8,2,1,5,7,6,3]))

