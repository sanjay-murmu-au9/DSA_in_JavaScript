# SEARCHING ALGORITHMS

let usernames = ['tommy','monkeygurl','dinesh123','patrick33','cats4lyfe']
console.log(usernames.indexOf('patrick33')) //3
console.log(usernames.indexOf('patrick333333')) //-1

OBjectives:-
	1. Describe what a searching algorithm is
	2. implement linear search on arrays
	3. implement binary search on sorted arrays
	4. Implement a naive string seaching algorithm
	5. Implement the KMP string searching algorithm

Linear seach Pseudocode
	* Function accepts an array and a value.
      * Loop through the array and check if the current array element is equal to the value,
      * If it is, return the index at which the element is found
	* If the value is never found, return -1;

function linearSearch(arr,num){
   for(let i=0;i<arr.length;i++){
    if(arr[i] === num){
       return i
    }
  }
  return -1;
}

console.log(linearSearch([1,2,4,6,8,89,35,21],10)) //-1 timeComplexity O(n);


# Linear Search  
# Binary Seach (work only on sorted array) : Divide and conquere;
	1. Binary search is a much faster form of search;
	2. Rather than eliminating one element at a time you can eliminate half of the remaining
	elements at a time;
	3. Binary search only works on the sorted arrays!

Binary search Pseudocode;
   * This function accepts a sorted array and a value 
   *create a left pointer at the start of the array, and a right pointer at the end of the 
    array
    * While the left pointer comes before the right pointer:
		1. create a pointer in the middle,
		2. If you find the value you want, return the index
		3. if the value is too small, move the left pointer up;
		4. If the value is too large, move the right pointer down.
		5.  If you never find the value, return -1;

		
function binarySearch(arr,num){
  let left = 0;
  let right = arr.length -1;
  
  while (left <= right){  
     let middle = Math.floor((left + right)/2);
     let currentElement = arr[middle]
     if(arr[middle] < num){
         
       left = middle +1;
      } else if(arr[middle] > num){
        right  = middle -1;
      }else{
        return middle;
      }
    
  }
  return -1;
 }

console.log(binarySearch([0,1,2,3,4,5,6,7,8,9,10],10))

// Or(work only on sorted arr)

function binarySearch(arr,elem){
  let start = 0;
  let end = arr.length -1;
  let middle = Math.floor((start + end)/2)
  while (arr[middle] !== elem && start <= end ){
    if(elem < arr[middle]) end = middle -1;
    else start = middle + 1;
    middle = Math.floor((start + end)/2);
  }
  return arr[middle] === elem ? middle : -1;
}

console.log(binarySearch([0,1,2,3,4,5,6,7,8,9,10],10)) // worst Case & Average case O(log n)
									// O(1) Best case; if searching middle arr.


# O(1) ----> Excellent;
# O(log n) ---> Good
# O(n) -----> Fair;
# O(n log n) -----> Bad;
# O(n^2) -------> Harrible
# O(2^n) -------> Horrible
# O(n!) ----------> Horrible;

# Naive String Search;
 * Suppose you want to count the number of times a smaller string appears in a longer string;
 * A straighforword approach involves checking pairs of characters individually;
 		


Long String:			Short String:
 wowomgzomg				wowomgzomg

			 wowomgzomg
				1  1 = 2;

Pseudocode
* Loop over the longer string;
* Loop over the short string;
* If the characters do not match, break out of the inner loop;
* If the character matches, keep going;
* If you complete the inner loop and find a match, increment the count of matches;
* Return the count;


 function naiveStr(long, short){
    let count = 0;
    for(let i=0;i<long.length;i++){
        for(let j=0;j<short.length;j++){
            // console.log(short[j],long[i+j])
            if(short[j] !== long[i+j]){ // init i=0,j=0 
                // console.log("Break!")
                break;
            }
            if(j === short.length-1){
                console.log('Found One!')
                count++;
            }
        }
    }
    return count;
}

console.log(naiveStr('lolie loled','lolie'))
