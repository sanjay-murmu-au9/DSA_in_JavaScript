# RADIX SORT
	# Radix sort is a special sorting algorithm that works on lists of numbers.

	# It never makes comparison between elements!
	# It exploits the fact that information about the size of a number is encoded in the 
	number of digits.
	
	# More digits means a bigger number!

Example:
	Hoe does it work?
	
	[1556, ]
 


 In order to implement radix sort, it's helpful to build a few helper functions first:

	getDigit(num,place) - return the digit in num at the given place value;

	getDigit(12345,0); // 5
	getDigit(12345,1)  // 4
	getDigit(12345,2)  // 3
	getDigit(12345,3)  // 2
 	getDigit(12345,4)  // 1
	getDigit(12345,5)  // 0

    function getDigit(num, i){
	  return Math.floor(Math.abs(num) / Math.pow(10,i)) % 10;
    }

console.log(getDigit(12345,2)) // 12345 / 10^2 => 12345 / 100 =>Math.floor(1234.5) % 10 => 4;

console.log(getDigit(7323,2)) // 7323/100  => 73 %10 => 3 Ans; 

# Radix Sort Helpers
In order to implement radix sort, it's helpful to build a few helper functions first:


RADIX SORT HELPERS
	In order to implement radix sort, it's helpful to build a few helper function first:
	
	digitCount(num) - returns the number of digits in num;


	digitCount(1)  // 1
	digitCount(25)  // 2
	digitCount(314)  // 3
	
	
function digitCount(num){
	if(num === 0) return 1;
	return Math.floor(Math.log10(Math.abs(num))) + 1;
}

console.log(digitCount(25)) // 2
// Math.log10(25) // 1.3979400086720377 => 1+1 = 2 digit;
// Math.log10(0)  // -Infinity; so handling with especial case if cond;
	
#RADIX SORT HELPERS
In order to implement radix sort, it's helpful to build a few helper function first:

 MostDigits(nums) - Given an array of numbers, returns the number of digits in the largest            numbers in the list;


mostDigits([1234,56,7]); // 4
mostDigits([1,1,111111,1]); // 6
mostDigits([12,34,56,78]); // 2

function digitCount(num){
	if(num === 0) return 1;
	return Math.floor(Math.log10(Math.abs(num))) + 1;
}

function mostDigits(nums){
  let maxDigit =0;
  for(let i=0;i<nums.length;i++){
   maxDigit = Math.max(maxDigit, digitCount(nums[i]));
  }
  return maxDigit;
}


console.log(mostDigits([1,2,123,12,11,12345,5555,666666666,71,54,65])) //9

RADIX SORT PSEUDOCODE
	* Define a function that accepts list of numbers
	* Figure out how many digits the largest number has
	* Loop from k=0 up to this largest number of digits
	* For each iteration of the loop:
		1. Create buckets for each digit(0 to 9)
		2. Place each number in the corresponding bucket based on its kth digit
	* Replace our existing array with values in our buckets,
	  starting with 0 and going up to 9;
	* return list at the end!



let digitBuckets = Array.from({length:10},()=>[]) // creating empty array

[].concat([[1],[2],[3]])  // 0: [1] 1:[2] 2:[3]
[].concat(...[[1],[2],[3]])  // [1,2,3]

 function digitCount(num){
  	return Math.floor(Math.log10(Math.abs(num))) + 1;
  }

  function mostDigits(nums){
	 let mostDigit = 0;
	 
	  for(let i=0;i<nums.length;i++){
	 	mostDigit = Math.max(mostDigit, digitCount(nums[i]))   	
	   }
	  return mostDigit;
	}

   function getDigit(num,k){
     	return Math.floor(Math.abs(num)/Math.pow(10,k)) % 10;
     return Math.floor(Math.abs(num) / Math.pow(10,i)) % 10;
   }



	function radixSort(nums){
		let maxDigitCount = mostDigits(nums);
	     for(let k=0;k < maxDigitCount; k++){
           let digitBuckets = Array.from({length:10},()=>[]); // creating empty 10  array;
	
		for(let i=0;i<nums.length;i++){
		   let digit = getDigit(nums[i],k);
		   digitBuckets[digit].push(nums[i]);
		 }
            nums = [].concat(...digitBuckets);
	    }
        return nums;
	}

 console.log(radixSort([23,1,34,5,6,7,88,99999,00000]))
