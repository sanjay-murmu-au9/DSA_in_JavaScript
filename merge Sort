# InterMediate Sorting Algorithms
	This is more faster then we study prev.
#Objectives
	1.understaing the limitations of the sorting algorithms we've learned so far.
	# Implementation merge sort
	# Implement quick sort
	# Implement radix sort

#Why Learn this
	# The sorting algo We've learned so far don't scale well
	# Try out bubble sort on an array of 100000 elements, It will take quite some time!

Eg. function bubbleSort(arr){
     var noSwaps;
     for(var i=arr.length;i>0;i--){
      noSwaps = true;
	for(var j=0; j<i-1;j++){
       var temp = arr[j];
       if(arr[j] > arr[j+1]){
        arr[j] = arr[j+1];
        arr[j+1] = temp;
       noSwaps = false;
       }
      }
      if(noSwaps) break;
     }
     return arr;
    }
	
//console.log(bubbleSort([2,3,4,1,6,3]))
var data = Array.apply(null,{length:100000}).map(Function.call,Math.random)
console.log(bubbleSort(data))

Note;
Same code if you run using mergeSort, you will notice how fast it is.
Merge Sort can improve time complexity from O(n^2) to O(n log n)
2. There is a family of soritng algorithms that can improve time complexity from O(n^2) to 
	O(n log n)
3. There's a tradeoff between efficiency and simplicity
4. The more efficient algo are much less simple and generally take longer to understand;

----------------------------MERGE SORT ------------------------

# Merge Sort invented on 1948 by Jonathan Van Norman (computer sci/Mathematician)
 1. It's a combination of two things - merging and sorting!
 2. Exploits the fact that arrays of 0 or 1 element are always sorted
 3. Works by decomposing an array into smaller arrays of 0 or 1 elements, then building up   	a newly sorted array.

   	# How does it work?
	[8,3,5,4,7,6,1,2]
	[8,3,5,4]  [7,6,1,2]  // divide in half
      [8,3][5,4]  [7,6] [1,2] //  divide again since didn't come to 1,or 0
      [8][3] [5][4] [7][6] [1] [2] 
      [3,8] [4,5]  [6,7] [1,2]
      [3,4,5,8]     [1,2,6,7]

	[1,2,3,4,5,6,7,8]


# Merging Arrays Pseudocode
	# Creating an empty array, take a look at the smallest values in each input array
	# While there are still values we haven't looked at ....
		1. if the values in the first array is smaller then the value in the second arr
			push the value in the first array  into our results and move on the next 
			value in the first array
		2. If the value in the first array is larger then second array, push the value 		of second array into our result and move on to the second array.

		3. Once we exhaust one array, push in all remaining values from the other array


Example
function mergeSort (arr1,arr2){
  let result =[];
  let i=0;
  let j=0;
 while(i < arr1.length &&  j  < arr2.length){
     if(arr2[j] > arr1[i] ){
      result.push(arr1[i])
	i++
     } else {
      result.push(arr2[j])
	j++
     }
 } 
 
 while( i < arr1.length){
	result.push(arr1[i])
	i++
}
while (j < arr2.length){
  result.push(arr2[j])
  j++ 
}
 return result;
}
console.log(mergeSort([1,10,50],[2,14,99,100,9])) //[1,2,10,14,50,99,100]


# mergeSort Pseudocode
 1. Break up the array into halves until you have arrays that are empty or have one element
 2. Once you have smaller sorted arrays, merge those arrays with other sorted arrays untill
	you are back at the full length of the array
 3. Once the array has been merged back together, return the merged (and sorted) array.

function merge(arr1,arr2){
  let result = [];
  let i = 0;
  let j = 0;
  while (i < arr1.length && j < arr2.length){
    if(arr1[i] < arr2[j]){
     result.push(arr1[i])
	i++;
    }else {
      result.push(arr2[j])
	 j++
    }
  }
  while(i < arr1.length){
      result.push(arr1[i])
	i++
  }
  while (j < arr2.length){
   result.push(arr2[j])
   j++;	
  }
 return result;
  
}

// using recurssion
function mergeSort(arr){
   if(arr.length <= 1) return arr;
   let mid = Math.floor(arr.length / 2)
   let left = mergeSort(arr.slice(0,mid))
   let right = mergeSort(arr.slice(mid,arr.length))
 
   return merge(left,right)  
   
}

mergeSort([8,6,5,3,29,0,12,77,83,99,12,43,111])

console.log(mergeSort([8,6,5,3,29,0,12,77,83,99,12,43,111]))


Big O of mergeSort 

Time Complexity(Best)		Time Complexity (Avg)	Time Complexity(Worst)	Space Comp()
 O(n log n)			       O(n log n)			O(n log n)			 O(n)
